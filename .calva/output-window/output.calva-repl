; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"0.9.0"},cider/cider-nrepl {:mvn/version,"0.27.4"}}}' -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉user꞉> (into (1 2) [3 4])
; Execution error (ClassCastException) at user/eval7324 (REPL:20).
; class java.lang.Long cannot be cast to class clojure.lang.IFn (java.lang.Long is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app')
clj꞉user꞉> 
(into '(1 2) [3 4])
(4 3 1 2)
clj꞉hench.path꞉> 
(into (vec (1 2)) [3 4])
; Execution error (ClassCastException) at hench.path/eval7593 (REPL:27).
; class java.lang.Long cannot be cast to class clojure.lang.IFn (java.lang.Long is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app')
clj꞉hench.path꞉> 
(into (vec '(1 2)) [3 4])
[1 2 3 4]
clj꞉hench.path꞉> 
; Evaluating file: path.clj
#'hench.path/strategize
clj꞉hench.path꞉> ()
#'hench.path/g
clj꞉hench.path꞉> 
Graph
211 Nodes:
	 6 5 
	 15 1 
	 3 19 
	 7 5 
	 13 5 
	 14 10 
	 16 3 
	 14 5 
	 14 8 
	 1 14 
	 7 19 
	 6 12 
	 1 17 
	 7 9 
	 1 2 
	 16 7 
	 8 7 
	 15 11 
	 12 12 
	 10 15 
	 4 18 
	 8 10 
	 16 8 
	 15 3 
	 2 11 
	 11 17 
	 7 15 
	 3 3 
	 17 20 
	 16 11 
	 3 15 
	 16 13 
	 12 10 
	 12 15 
	 5 11 
	 9 13 
	 14 14 
	 10 13 
	 1 0 
	 10 11 
	 17 0 
	 11 7 
	 7 1 
	 14 9 
	 9 11 
	 12 1 
	 11 15 
	 16 15 
	 17 7 
	 6 4 
	 8 13 
	 14 4 
	 14 15 
	 4 13 
	 4 3 
	 14 6 
	 17 13 
	 17 18 
	 3 17 
	 15 15 
	 13 17 
	 12 11 
	 7 7 
	 8 9 
	 8 5 
	 5 5 
	 12 19 
	 14 1 
	 6 9 
	 2 13 
	 17 15 
	 17 11 
	 12 13 
	 2 5 
	 10 7 
	 16 5 
	 11 3 
	 13 7 
	 10 14 
	 11 5 
	 5 17 
	 2 8 
	 8 2 
	 15 19 
	 4 1 
	 4 14 
	 10 5 
	 6 10 
	 15 7 
	 6 17 
	 17 1 
	 13 1 
	 11 13 
	 6 1 
	 8 3 
	 8 18 
	 6 11 
	 5 1 
	 10 3 
	 6 13 
	 1 7 
	 1 6 
	 10 9 
	 9 1 
	 1 18 
	 4 19 
	 6 8 
	 13 19 
	 1 8 
	 17 6 
	 4 9 
	 2 17 
	 12 9 
	 11 19 
	 12 17 
	 6 19 
	 16 14 
	 14 16 
	 6 16 
	 2 14 
	 7 3 
	 16 4 
	 14 18 
	 17 9 
	 8 19 
	 6 15 
	 12 5 
	 2 4 
	 4 10 
	 10 19 
	 10 18 
	 9 5 
	 8 14 
	 10 1 
	 12 16 
	 14 13 
	 4 15 
	 2 19 
	 8 12 
	 16 1 
	 4 6 
	 10 2 
	 8 17 
	 5 19 
	 4 11 
	 1 19 
	 6 7 
	 4 4 
	 0 11 
	 1 13 
	 17 8 
	 4 17 
	 6 3 
	 10 10 
	 1 16 
	 12 7 
	 14 19 
	 12 4 
	 4 7 
	 18 11 
	 2 3 
	 2 1 
	 1 9 
	 7 13 
	 14 12 
	 16 19 
	 11 9 
	 2 7 
	 4 16 
	 1 15 
	 3 11 
	 17 19 
	 8 6 
	 8 1 
	 17 5 
	 1 3 
	 9 17 
	 8 11 
	 14 3 
	 17 16 
	 1 1 
	 4 12 
	 5 7 
	 16 17 
	 10 6 
	 4 8 
	 17 2 
	 12 8 
	 8 15 
	 4 5 
	 14 7 
	 1 20 
	 3 7 
	 17 3 
	 14 17 
	 1 5 
	 11 1 
	 17 17 
	 1 11 
	 17 14 
	 9 9 
	 13 11 
	 2 9 
	 7 17 
	 10 17 
	 10 12 
	 14 11 
	 12 3 
	 15 17 
	 2 15 
	 16 9 
243 Edges:
	 6 5 <-> 7 5 
	 6 5 <-> 6 4 
	 6 5 <-> 5 5 
	 15 1 <-> 14 1 
	 15 1 <-> 16 1 
	 3 19 <-> 4 19 
	 3 19 <-> 2 19 
	 7 5 <-> 8 5 
	 13 5 <-> 14 5 
	 13 5 <-> 12 5 
	 14 10 <-> 14 9 
	 14 10 <-> 14 11 
	 16 3 <-> 15 3 
	 16 3 <-> 16 4 
	 16 3 <-> 17 3 
	 14 5 <-> 14 4 
	 14 5 <-> 14 6 
	 14 8 <-> 14 9 
	 14 8 <-> 14 7 
	 1 14 <-> 2 14 
	 1 14 <-> 1 13 
	 1 14 <-> 1 15 
	 7 19 <-> 6 19 
	 7 19 <-> 8 19 
	 6 12 <-> 6 11 
	 6 12 <-> 6 13 
	 1 17 <-> 1 18 
	 1 17 <-> 2 17 
	 1 17 <-> 1 16 
	 7 9 <-> 8 9 
	 7 9 <-> 6 9 
	 1 2 <-> 1 3 
	 1 2 <-> 1 1 
	 16 7 <-> 16 8 
	 16 7 <-> 17 7 
	 16 7 <-> 15 7 
	 8 7 <-> 7 7 
	 8 7 <-> 8 6 
	 15 11 <-> 16 11 
	 15 11 <-> 14 11 
	 12 12 <-> 12 11 
	 12 12 <-> 12 13 
	 10 15 <-> 11 15 
	 10 15 <-> 10 14 
	 4 18 <-> 4 19 
	 4 18 <-> 4 17 
	 8 10 <-> 8 9 
	 8 10 <-> 8 11 
	 16 8 <-> 17 8 
	 16 8 <-> 16 9 
	 15 3 <-> 14 3 
	 2 11 <-> 3 11 
	 2 11 <-> 1 11 
	 11 17 <-> 12 17 
	 11 17 <-> 10 17 
	 7 15 <-> 6 15 
	 7 15 <-> 8 15 
	 3 3 <-> 4 3 
	 3 3 <-> 2 3 
	 17 20 <-> 17 0 
	 17 20 <-> 17 19 
	 16 11 <-> 17 11 
	 3 15 <-> 4 15 
	 3 15 <-> 2 15 
	 16 13 <-> 17 13 
	 16 13 <-> 16 14 
	 12 10 <-> 12 11 
	 12 10 <-> 12 9 
	 12 15 <-> 11 15 
	 12 15 <-> 12 16 
	 5 11 <-> 6 11 
	 5 11 <-> 4 11 
	 9 13 <-> 10 13 
	 9 13 <-> 8 13 
	 14 14 <-> 14 15 
	 14 14 <-> 14 13 
	 10 13 <-> 10 14 
	 10 13 <-> 11 13 
	 10 13 <-> 10 12 
	 1 0 <-> 1 1 
	 1 0 <-> 1 20 
	 10 11 <-> 9 11 
	 10 11 <-> 10 10 
	 10 11 <-> 10 12 
	 17 0 <-> 17 1 
	 11 7 <-> 10 7 
	 11 7 <-> 12 7 
	 7 1 <-> 6 1 
	 7 1 <-> 8 1 
	 9 11 <-> 8 11 
	 12 1 <-> 13 1 
	 12 1 <-> 11 1 
	 16 15 <-> 15 15 
	 16 15 <-> 17 15 
	 16 15 <-> 16 14 
	 17 7 <-> 17 6 
	 17 7 <-> 17 8 
	 6 4 <-> 6 3 
	 8 13 <-> 8 14 
	 8 13 <-> 8 12 
	 8 13 <-> 7 13 
	 14 4 <-> 14 3 
	 14 15 <-> 15 15 
	 14 15 <-> 14 16 
	 4 13 <-> 4 14 
	 4 13 <-> 4 12 
	 4 3 <-> 4 4 
	 14 6 <-> 14 7 
	 17 13 <-> 17 14 
	 17 18 <-> 17 19 
	 17 18 <-> 17 17 
	 3 17 <-> 2 17 
	 3 17 <-> 4 17 
	 13 17 <-> 12 17 
	 13 17 <-> 14 17 
	 12 11 <-> 13 11 
	 7 7 <-> 6 7 
	 8 9 <-> 9 9 
	 8 5 <-> 9 5 
	 8 5 <-> 8 6 
	 5 5 <-> 4 5 
	 12 19 <-> 13 19 
	 12 19 <-> 11 19 
	 14 1 <-> 13 1 
	 6 9 <-> 6 10 
	 6 9 <-> 6 8 
	 2 13 <-> 2 14 
	 2 13 <-> 1 13 
	 17 15 <-> 17 16 
	 17 15 <-> 17 14 
	 17 11 <-> 18 11 
	 12 13 <-> 11 13 
	 2 5 <-> 2 4 
	 2 5 <-> 1 5 
	 10 7 <-> 10 6 
	 16 5 <-> 16 4 
	 16 5 <-> 17 5 
	 11 3 <-> 10 3 
	 11 3 <-> 12 3 
	 13 7 <-> 12 7 
	 13 7 <-> 14 7 
	 11 5 <-> 10 5 
	 11 5 <-> 12 5 
	 5 17 <-> 6 17 
	 5 17 <-> 4 17 
	 2 8 <-> 1 8 
	 2 8 <-> 2 7 
	 2 8 <-> 2 9 
	 8 2 <-> 8 3 
	 8 2 <-> 8 1 
	 15 19 <-> 14 19 
	 15 19 <-> 16 19 
	 4 1 <-> 5 1 
	 4 14 <-> 4 15 
	 10 5 <-> 9 5 
	 10 5 <-> 10 6 
	 6 10 <-> 6 11 
	 15 7 <-> 14 7 
	 6 17 <-> 6 16 
	 6 17 <-> 7 17 
	 17 1 <-> 16 1 
	 17 1 <-> 17 2 
	 6 1 <-> 5 1 
	 8 3 <-> 7 3 
	 8 18 <-> 8 19 
	 8 18 <-> 8 17 
	 10 3 <-> 10 2 
	 6 13 <-> 7 13 
	 1 7 <-> 1 6 
	 1 7 <-> 1 8 
	 1 7 <-> 2 7 
	 1 6 <-> 1 5 
	 10 9 <-> 10 10 
	 10 9 <-> 11 9 
	 10 9 <-> 9 9 
	 9 1 <-> 10 1 
	 9 1 <-> 8 1 
	 1 18 <-> 1 19 
	 4 19 <-> 5 19 
	 6 8 <-> 6 7 
	 13 19 <-> 14 19 
	 1 8 <-> 1 9 
	 17 6 <-> 17 5 
	 4 9 <-> 4 10 
	 4 9 <-> 4 8 
	 12 9 <-> 11 9 
	 12 9 <-> 12 8 
	 11 19 <-> 10 19 
	 12 17 <-> 12 16 
	 6 19 <-> 5 19 
	 16 14 <-> 17 14 
	 14 16 <-> 14 17 
	 6 16 <-> 6 15 
	 2 14 <-> 2 15 
	 7 3 <-> 6 3 
	 14 18 <-> 14 19 
	 14 18 <-> 14 17 
	 17 9 <-> 17 8 
	 17 9 <-> 16 9 
	 12 5 <-> 12 4 
	 2 4 <-> 2 3 
	 4 10 <-> 4 11 
	 10 19 <-> 10 18 
	 10 18 <-> 10 17 
	 8 14 <-> 8 15 
	 10 1 <-> 10 2 
	 10 1 <-> 11 1 
	 14 13 <-> 14 12 
	 4 15 <-> 4 16 
	 2 19 <-> 1 19 
	 8 12 <-> 8 11 
	 4 6 <-> 4 7 
	 4 6 <-> 4 5 
	 8 17 <-> 9 17 
	 8 17 <-> 7 17 
	 4 11 <-> 3 11 
	 4 11 <-> 4 12 
	 1 19 <-> 1 20 
	 6 7 <-> 5 7 
	 4 4 <-> 4 5 
	 0 11 <-> 18 11 
	 0 11 <-> 1 11 
	 4 17 <-> 4 16 
	 1 16 <-> 1 15 
	 12 7 <-> 12 8 
	 12 4 <-> 12 3 
	 4 7 <-> 5 7 
	 4 7 <-> 4 8 
	 4 7 <-> 3 7 
	 2 3 <-> 1 3 
	 2 1 <-> 1 1 
	 1 9 <-> 2 9 
	 14 12 <-> 14 11 
	 16 19 <-> 17 19 
	 2 7 <-> 3 7 
	 1 15 <-> 2 15 
	 9 17 <-> 10 17 
	 17 16 <-> 17 17 
	 16 17 <-> 17 17 
	 16 17 <-> 15 17 
	 17 2 <-> 17 3 
	 14 17 <-> 15 17 
	 13 11 <-> 14 11 
nil
clj꞉hench.path꞉> 
#'hench.path/outof21
clj꞉hench.path꞉> 
("2 1"
 "1 1"
 "1 2"
 "1 3"
 "2 3"
 "3 3"
 "4 3"
 "4 4"
 "4 5"
 "4 6"
 "4 7"
 "5 7"
 "6 7"
 "6 8"
 "6 9"
 "7 9"
 "8 9"
 "8 10"
 "8 11"
 "9 11")
clj꞉hench.path꞉> (into (alg/nodes-in-path (alg/path-to outof21 "9 11")) out-top-right)
("10 13"
 "10 12"
 "10 11"
 "2 1"
 "1 1"
 "1 2"
 "1 3"
 "2 3"
 "3 3"
 "4 3"
 "4 4"
 "4 5"
 "4 6"
 "4 7"
 "5 7"
 "6 7"
 "6 8"
 "6 9"
 "7 9"
 "8 9"
 "8 10"
 "8 11"
 "9 11")
clj꞉hench.path꞉> 
(into (into [] (alg/nodes-in-path (alg/path-to outof21 "9 11"))) out-top-right)
["2 1"
 "1 1"
 "1 2"
 "1 3"
 "2 3"
 "3 3"
 "4 3"
 "4 4"
 "4 5"
 "4 6"
 "4 7"
 "5 7"
 "6 7"
 "6 8"
 "6 9"
 "7 9"
 "8 9"
 "8 10"
 "8 11"
 "9 11"
 "10 11"
 "10 12"
 "10 13"]
clj꞉hench.path꞉> (into [1 2 3] [nil])
[1 2 3 nil]
clj꞉hench.core꞉> 
(into [1 2 3] [])
[1 2 3]
clj꞉hench.core꞉> 
[2 4 3 5 1 7 6 8 9]
clj꞉hench.utils꞉> (nmshuffle 0 0 [1 2 3 4 5])
[4 1 2 5 3]
clj꞉hench.utils꞉> 
(nmshuffle 2 2 [1 2 3 4 5])
[2 1 5 4 3]
clj꞉hench.utils꞉> 
