; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"0.9.0"},cider/cider-nrepl {:mvn/version,"0.27.4"}}}' -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉user꞉> (into [1 2 3] (into [] (concat [4 5] [6 7])))
[1 2 3 4 5 6 7]
clj꞉user꞉> (take 8 [1 2 3 4 5 6 7 8 9])
(1 2 3 4 5 6 7 8)
clj꞉hench.space꞉> (first '(1 2 3))
1
clj꞉hench.core꞉> (conj [1 2] 3)

[1 2 3]
clj꞉hench.core꞉> 
; Evaluating file: path.clj
; Syntax error compiling at (src/hench/path.clj:23:43).
; Unable to resolve symbol: add in this context
; Evaluation of file path.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉hench.path꞉> 
nil
clj꞉hench.path꞉> 
; Evaluating file: path.clj
; Syntax error compiling at (src/hench/path.clj:23:43).
; Unable to resolve symbol: add in this context
; Evaluation of file path.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉hench.path꞉> 
; Evaluating file: utils.clj
#'hench.utils/shortest
clj꞉hench.utils꞉> 
; Evaluating file: samples.clj
#'hench.samples/am-sample
clj꞉hench.samples꞉> 
; Evaluating file: path.clj
#'hench.path/strategize
clj꞉hench.path꞉> (create-base-graph)
; Execution error (ArityException) at hench.path/eval17504 (REPL:50).
; Wrong number of args (0) passed to: hench.path/create-base-graph
clj꞉hench.path꞉> (create-base-graph am-sample)
[["6 5" "7 5"]
 ["6 5" "6 4"]
 ["6 5" "5 5"]
 ["15 1" "14 1"]
 ["15 1" "16 1"]
 ["3 19" "4 19"]
 ["3 19" "2 19"]
 ["7 5" "6 5"]
 ["7 5" "8 5"]
 ["13 5" "14 5"]
 ["13 5" "12 5"]
 ["14 10" "14 9"]
 ["14 10" "14 11"]
 ["16 3" "15 3"]
 ["16 3" "16 4"]
 ["16 3" "17 3"]
 ["14 5" "13 5"]
 ["14 5" "14 4"]
 ["14 5" "14 6"]
 ["14 8" "14 9"]
 ["14 8" "14 7"]
 ["1 14" "2 14"]
 ["1 14" "1 13"]
 ["1 14" "1 15"]
 ["7 19" "6 19"]
 ["7 19" "8 19"]
 ["6 12" "6 11"]
 ["6 12" "6 13"]
 ["1 17" "1 18"]
 ["1 17" "2 17"]
 ["1 17" "1 16"]
 ["7 9" "8 9"]
 ["7 9" "6 9"]
 ["1 2" "1 3"]
 ["1 2" "1 1"]
 ["16 7" "16 8"]
 ["16 7" "17 7"]
 ["16 7" "15 7"]
 ["8 7" "7 7"]
 ["8 7" "8 6"]
 ["15 11" "16 11"]
 ["15 11" "14 11"]
 ["12 12" "12 11"]
 ["12 12" "12 13"]
 ["10 15" "11 15"]
 ["10 15" "10 14"]
 ["3 1" "4 1"]
 ["3 1" "2 1"]
 ["4 18" "4 19"]
 ["4 18" "4 17"]
 ...]
clj꞉hench.path꞉> 
; Evaluating file: path.clj
#'hench.path/strategize
clj꞉hench.path꞉> (sort-by #(sd (:you am-sample) % 19 21) am-intersections)
({:x 1, :y 1}
 {:x 2, :y 3}
 {:x 17, :y 1}
 {:x 1, :y 19}
 {:x 4, :y 19}
 {:x 8, :y 1}
 {:x 4, :y 5}
 {:x 1, :y 17}
 {:x 4, :y 17}
 {:x 16, :y 3}
 {:x 1, :y 7}
 {:x 17, :y 19}
 {:x 4, :y 7}
 {:x 10, :y 1}
 {:x 6, :y 5}
 {:x 1, :y 15}
 {:x 4, :y 15}
 {:x 6, :y 17}
 {:x 17, :y 17}
 {:x 8, :y 5}
 {:x 6, :y 7}
 {:x 17, :y 7}
 {:x 14, :y 19}
 {:x 14, :y 5}
 {:x 17, :y 15}
 {:x 8, :y 17}
 {:x 4, :y 11}
 {:x 14, :y 17}
 {:x 10, :y 5}
 {:x 6, :y 9}
 {:x 14, :y 7}
 {:x 12, :y 5}
 {:x 10, :y 17}
 {:x 8, :y 9}
 {:x 6, :y 11}
 {:x 14, :y 15}
 {:x 12, :y 17}
 {:x 8, :y 13}
 {:x 12, :y 7}
 {:x 8, :y 11}
 {:x 10, :y 9}
 {:x 14, :y 11}
 {:x 10, :y 13}
 {:x 12, :y 9}
 {:x 10, :y 11}
 {:x 12, :y 11})
clj꞉hench.path꞉> (:head (:you am-sample))
{:x 2, :y 1}
clj꞉hench.path꞉> (index-in-path 3 [1 2 3])
2
clj꞉hench.path꞉> 
(index-in-path 4 [1 2 3])
-1
clj꞉hench.path꞉> (index-in-path (c->n nil) [1 2 3])
-1
clj꞉hench.path꞉> 
(c->n nil)
" "
clj꞉hench.path꞉> 
(index-in-path (c->n nil) '(1 2 3))
-1
clj꞉hench.path꞉> 
(index-in-path (c->n nil) '(1 2 3))
#'hench.path/g
clj꞉hench.path꞉> 
Graph
211 Nodes:
	 6 5 
	 15 1 
	 3 19 
	 7 5 
	 13 5 
	 14 10 
	 16 3 
	 14 5 
	 14 8 
	 1 14 
	 7 19 
	 6 12 
	 1 17 
	 7 9 
	 1 2 
	 16 7 
	 8 7 
	 15 11 
	 12 12 
	 10 15 
	 4 18 
	 8 10 
	 16 8 
	 15 3 
	 2 11 
	 11 17 
	 7 15 
	 3 3 
	 17 20 
	 16 11 
	 3 15 
	 16 13 
	 12 10 
	 12 15 
	 5 11 
	 9 13 
	 14 14 
	 10 13 
	 1 0 
	 10 11 
	 17 0 
	 11 7 
	 7 1 
	 14 9 
	 9 11 
	 12 1 
	 11 15 
	 16 15 
	 17 7 
	 6 4 
	 8 13 
	 14 4 
	 14 15 
	 4 13 
	 4 3 
	 14 6 
	 17 13 
	 17 18 
	 3 17 
	 15 15 
	 13 17 
	 12 11 
	 7 7 
	 8 9 
	 8 5 
	 5 5 
	 12 19 
	 14 1 
	 6 9 
	 2 13 
	 17 15 
	 17 11 
	 12 13 
	 2 5 
	 10 7 
	 16 5 
	 11 3 
	 13 7 
	 10 14 
	 11 5 
	 5 17 
	 2 8 
	 8 2 
	 15 19 
	 4 1 
	 4 14 
	 10 5 
	 6 10 
	 15 7 
	 6 17 
	 17 1 
	 13 1 
	 11 13 
	 6 1 
	 8 3 
	 8 18 
	 6 11 
	 5 1 
	 10 3 
	 6 13 
	 1 7 
	 1 6 
	 10 9 
	 9 1 
	 1 18 
	 4 19 
	 6 8 
	 13 19 
	 1 8 
	 17 6 
	 4 9 
	 2 17 
	 12 9 
	 11 19 
	 12 17 
	 6 19 
	 16 14 
	 14 16 
	 6 16 
	 2 14 
	 7 3 
	 16 4 
	 14 18 
	 17 9 
	 8 19 
	 6 15 
	 12 5 
	 2 4 
	 4 10 
	 10 19 
	 10 18 
	 9 5 
	 8 14 
	 10 1 
	 12 16 
	 14 13 
	 4 15 
	 2 19 
	 8 12 
	 16 1 
	 4 6 
	 10 2 
	 8 17 
	 5 19 
	 4 11 
	 1 19 
	 6 7 
	 4 4 
	 0 11 
	 1 13 
	 17 8 
	 4 17 
	 6 3 
	 10 10 
	 1 16 
	 12 7 
	 14 19 
	 12 4 
	 4 7 
	 18 11 
	 2 3 
	 2 1 
	 1 9 
	 7 13 
	 14 12 
	 16 19 
	 11 9 
	 2 7 
	 4 16 
	 1 15 
	 3 11 
	 17 19 
	 8 6 
	 8 1 
	 17 5 
	 1 3 
	 9 17 
	 8 11 
	 14 3 
	 17 16 
	 1 1 
	 4 12 
	 5 7 
	 16 17 
	 10 6 
	 4 8 
	 17 2 
	 12 8 
	 8 15 
	 4 5 
	 14 7 
	 1 20 
	 3 7 
	 17 3 
	 14 17 
	 1 5 
	 11 1 
	 17 17 
	 1 11 
	 17 14 
	 9 9 
	 13 11 
	 2 9 
	 7 17 
	 10 17 
	 10 12 
	 14 11 
	 12 3 
	 15 17 
	 2 15 
	 16 9 
243 Edges:
	 6 5 <-> 7 5 
	 6 5 <-> 6 4 
	 6 5 <-> 5 5 
	 15 1 <-> 14 1 
	 15 1 <-> 16 1 
	 3 19 <-> 4 19 
	 3 19 <-> 2 19 
	 7 5 <-> 8 5 
	 13 5 <-> 14 5 
	 13 5 <-> 12 5 
	 14 10 <-> 14 9 
	 14 10 <-> 14 11 
	 16 3 <-> 15 3 
	 16 3 <-> 16 4 
	 16 3 <-> 17 3 
	 14 5 <-> 14 4 
	 14 5 <-> 14 6 
	 14 8 <-> 14 9 
	 14 8 <-> 14 7 
	 1 14 <-> 2 14 
	 1 14 <-> 1 13 
	 1 14 <-> 1 15 
	 7 19 <-> 6 19 
	 7 19 <-> 8 19 
	 6 12 <-> 6 11 
	 6 12 <-> 6 13 
	 1 17 <-> 1 18 
	 1 17 <-> 2 17 
	 1 17 <-> 1 16 
	 7 9 <-> 8 9 
	 7 9 <-> 6 9 
	 1 2 <-> 1 3 
	 1 2 <-> 1 1 
	 16 7 <-> 16 8 
	 16 7 <-> 17 7 
	 16 7 <-> 15 7 
	 8 7 <-> 7 7 
	 8 7 <-> 8 6 
	 15 11 <-> 16 11 
	 15 11 <-> 14 11 
	 12 12 <-> 12 11 
	 12 12 <-> 12 13 
	 10 15 <-> 11 15 
	 10 15 <-> 10 14 
	 4 18 <-> 4 19 
	 4 18 <-> 4 17 
	 8 10 <-> 8 9 
	 8 10 <-> 8 11 
	 16 8 <-> 17 8 
	 16 8 <-> 16 9 
	 15 3 <-> 14 3 
	 2 11 <-> 3 11 
	 2 11 <-> 1 11 
	 11 17 <-> 12 17 
	 11 17 <-> 10 17 
	 7 15 <-> 6 15 
	 7 15 <-> 8 15 
	 3 3 <-> 4 3 
	 3 3 <-> 2 3 
	 17 20 <-> 17 0 
	 17 20 <-> 17 19 
	 16 11 <-> 17 11 
	 3 15 <-> 4 15 
	 3 15 <-> 2 15 
	 16 13 <-> 17 13 
	 16 13 <-> 16 14 
	 12 10 <-> 12 11 
	 12 10 <-> 12 9 
	 12 15 <-> 11 15 
	 12 15 <-> 12 16 
	 5 11 <-> 6 11 
	 5 11 <-> 4 11 
	 9 13 <-> 10 13 
	 9 13 <-> 8 13 
	 14 14 <-> 14 15 
	 14 14 <-> 14 13 
	 10 13 <-> 10 14 
	 10 13 <-> 11 13 
	 10 13 <-> 10 12 
	 1 0 <-> 1 1 
	 1 0 <-> 1 20 
	 10 11 <-> 9 11 
	 10 11 <-> 10 10 
	 10 11 <-> 10 12 
	 17 0 <-> 17 1 
	 11 7 <-> 10 7 
	 11 7 <-> 12 7 
	 7 1 <-> 6 1 
	 7 1 <-> 8 1 
	 9 11 <-> 8 11 
	 12 1 <-> 13 1 
	 12 1 <-> 11 1 
	 16 15 <-> 15 15 
	 16 15 <-> 17 15 
	 16 15 <-> 16 14 
	 17 7 <-> 17 6 
	 17 7 <-> 17 8 
	 6 4 <-> 6 3 
	 8 13 <-> 8 14 
	 8 13 <-> 8 12 
	 8 13 <-> 7 13 
	 14 4 <-> 14 3 
	 14 15 <-> 15 15 
	 14 15 <-> 14 16 
	 4 13 <-> 4 14 
	 4 13 <-> 4 12 
	 4 3 <-> 4 4 
	 14 6 <-> 14 7 
	 17 13 <-> 17 14 
	 17 18 <-> 17 19 
	 17 18 <-> 17 17 
	 3 17 <-> 2 17 
	 3 17 <-> 4 17 
	 13 17 <-> 12 17 
	 13 17 <-> 14 17 
	 12 11 <-> 13 11 
	 7 7 <-> 6 7 
	 8 9 <-> 9 9 
	 8 5 <-> 9 5 
	 8 5 <-> 8 6 
	 5 5 <-> 4 5 
	 12 19 <-> 13 19 
	 12 19 <-> 11 19 
	 14 1 <-> 13 1 
	 6 9 <-> 6 10 
	 6 9 <-> 6 8 
	 2 13 <-> 2 14 
	 2 13 <-> 1 13 
	 17 15 <-> 17 16 
	 17 15 <-> 17 14 
	 17 11 <-> 18 11 
	 12 13 <-> 11 13 
	 2 5 <-> 2 4 
	 2 5 <-> 1 5 
	 10 7 <-> 10 6 
	 16 5 <-> 16 4 
	 16 5 <-> 17 5 
	 11 3 <-> 10 3 
	 11 3 <-> 12 3 
	 13 7 <-> 12 7 
	 13 7 <-> 14 7 
	 11 5 <-> 10 5 
	 11 5 <-> 12 5 
	 5 17 <-> 6 17 
	 5 17 <-> 4 17 
	 2 8 <-> 1 8 
	 2 8 <-> 2 7 
	 2 8 <-> 2 9 
	 8 2 <-> 8 3 
	 8 2 <-> 8 1 
	 15 19 <-> 14 19 
	 15 19 <-> 16 19 
	 4 1 <-> 5 1 
	 4 14 <-> 4 15 
	 10 5 <-> 9 5 
	 10 5 <-> 10 6 
	 6 10 <-> 6 11 
	 15 7 <-> 14 7 
	 6 17 <-> 6 16 
	 6 17 <-> 7 17 
	 17 1 <-> 16 1 
	 17 1 <-> 17 2 
	 6 1 <-> 5 1 
	 8 3 <-> 7 3 
	 8 18 <-> 8 19 
	 8 18 <-> 8 17 
	 10 3 <-> 10 2 
	 6 13 <-> 7 13 
	 1 7 <-> 1 6 
	 1 7 <-> 1 8 
	 1 7 <-> 2 7 
	 1 6 <-> 1 5 
	 10 9 <-> 10 10 
	 10 9 <-> 11 9 
	 10 9 <-> 9 9 
	 9 1 <-> 10 1 
	 9 1 <-> 8 1 
	 1 18 <-> 1 19 
	 4 19 <-> 5 19 
	 6 8 <-> 6 7 
	 13 19 <-> 14 19 
	 1 8 <-> 1 9 
	 17 6 <-> 17 5 
	 4 9 <-> 4 10 
	 4 9 <-> 4 8 
	 12 9 <-> 11 9 
	 12 9 <-> 12 8 
	 11 19 <-> 10 19 
	 12 17 <-> 12 16 
	 6 19 <-> 5 19 
	 16 14 <-> 17 14 
	 14 16 <-> 14 17 
	 6 16 <-> 6 15 
	 2 14 <-> 2 15 
	 7 3 <-> 6 3 
	 14 18 <-> 14 19 
	 14 18 <-> 14 17 
	 17 9 <-> 17 8 
	 17 9 <-> 16 9 
	 12 5 <-> 12 4 
	 2 4 <-> 2 3 
	 4 10 <-> 4 11 
	 10 19 <-> 10 18 
	 10 18 <-> 10 17 
	 8 14 <-> 8 15 
	 10 1 <-> 10 2 
	 10 1 <-> 11 1 
	 14 13 <-> 14 12 
	 4 15 <-> 4 16 
	 2 19 <-> 1 19 
	 8 12 <-> 8 11 
	 4 6 <-> 4 7 
	 4 6 <-> 4 5 
	 8 17 <-> 9 17 
	 8 17 <-> 7 17 
	 4 11 <-> 3 11 
	 4 11 <-> 4 12 
	 1 19 <-> 1 20 
	 6 7 <-> 5 7 
	 4 4 <-> 4 5 
	 0 11 <-> 18 11 
	 0 11 <-> 1 11 
	 4 17 <-> 4 16 
	 1 16 <-> 1 15 
	 12 7 <-> 12 8 
	 12 4 <-> 12 3 
	 4 7 <-> 5 7 
	 4 7 <-> 4 8 
	 4 7 <-> 3 7 
	 2 3 <-> 1 3 
	 2 1 <-> 1 1 
	 1 9 <-> 2 9 
	 14 12 <-> 14 11 
	 16 19 <-> 17 19 
	 2 7 <-> 3 7 
	 1 15 <-> 2 15 
	 9 17 <-> 10 17 
	 17 16 <-> 17 17 
	 16 17 <-> 17 17 
	 16 17 <-> 15 17 
	 17 2 <-> 17 3 
	 14 17 <-> 15 17 
	 13 11 <-> 14 11 
nil
clj꞉hench.path꞉> 
#'hench.path/outof21
clj꞉hench.path꞉> 
("2 1"
 "1 1"
 "1 2"
 "1 3"
 "2 3"
 "3 3"
 "4 3"
 "4 4"
 "4 5"
 "4 6"
 "4 7"
 "5 7"
 "6 7"
 "6 8"
 "6 9"
 "7 9"
 "8 9"
 "8 10"
 "8 11"
 "9 11")
clj꞉hench.path꞉> (index-in-path "1 2" ("2 1"
                                       "1 1"
                                       "1 2"
                                       "1 3"
                                       "2 3"
                                       "3 3"
                                       "4 3"
                                       "4 4"
                                       "4 5"
                                       "4 6"
                                       "4 7"
                                       "5 7"
                                       "6 7"
                                       "6 8"
                                       "6 9"
                                       "7 9"
                                       "8 9"
                                       "8 10"
                                       "8 11"
                                       "9 11"))
; Execution error (ClassCastException) at hench.path/eval18872 (REPL:655).
; class java.lang.String cannot be cast to class clojure.lang.IFn (java.lang.String is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app')
clj꞉hench.path꞉> 
(index-in-path "1 2" '("2 1"
                                       "1 1"
                                       "1 2"
                                       "1 3"
                                       "2 3"
                                       "3 3"
                                       "4 3"
                                       "4 4"
                                       "4 5"
                                       "4 6"
                                       "4 7"
                                       "5 7"
                                       "6 7"
                                       "6 8"
                                       "6 9"
                                       "7 9"
                                       "8 9"
                                       "8 10"
                                       "8 11"
                                       "9 11"))
2
clj꞉hench.path꞉> 
(index-in-path nil '("2 1"
                  "1 1"
                  "1 2"
                  "1 3"
                  "2 3"
                  "3 3"
                  "4 3"
                  "4 4"
                  "4 5"
                  "4 6"
                  "4 7"
                  "5 7"
                  "6 7"
                  "6 8"
                  "6 9"
                  "7 9"
                  "8 9"
                  "8 10"
                  "8 11"
                  "9 11"))
-1
clj꞉hench.path꞉> 
(index-in-path {:x 1 :y 2} '("2 1"
                  "1 1"
                  "1 2"
                  "1 3"
                  "2 3"
                  "3 3"
                  "4 3"
                  "4 4"
                  "4 5"
                  "4 6"
                  "4 7"
                  "5 7"
                  "6 7"
                  "6 8"
                  "6 9"
                  "7 9"
                  "8 9"
                  "8 10"
                  "8 11"
                  "9 11"))
-1
clj꞉hench.path꞉> (:e {:e {:x 1 :y 2} :snake "me"})
{:x 1, :y 2}
clj꞉hench.path꞉> 
(c->n (:e {:e {:x 1 :y 2} :snake "me"}))
"1 2"
clj꞉hench.path꞉> (first [])
nil
clj꞉hench.path꞉> 
(index-in-path " " '("2 1"
                  "1 1"
                  "1 2"
                  "1 3"
                  "2 3"
                  "3 3"
                  "4 3"
                  "4 4"
                  "4 5"
                  "4 6"
                  "4 7"
                  "5 7"
                  "6 7"
                  "6 8"
                  "6 9"
                  "7 9"
                  "8 9"
                  "8 10"
                  "8 11"
                  "9 11"))
-1
clj꞉hench.path꞉> (.indexOf [] [1 2])
-1
clj꞉hench.path꞉> 
#'hench.path/body-params
clj꞉hench.path꞉> 
#'hench.path/base-graph
clj꞉hench.path꞉> 
; Syntax error (IllegalStateException) compiling def at (src/hench/path.clj:606:3).
; other-snakes already refers to: #'hench.utils/other-snakes in namespace: hench.path
clj꞉hench.path꞉> 
#'hench.path/other-snakes1
clj꞉hench.path꞉> 
#'hench.path/me
clj꞉hench.path꞉> 
; Execution error (IllegalArgumentException) at hench.path/remove-point-from-graph (path.clj:198).
; Don't know how to create ISeq from: clojure.lang.Var$Unbound
clj꞉hench.path꞉> 
#'hench.path/remove-point-from-graph
clj꞉hench.path꞉> 
; Execution error (IllegalArgumentException) at hench.path/remove-point-from-graph (REPL:198).
; Don't know how to create ISeq from: clojure.lang.Var$Unbound
clj꞉hench.path꞉> 
; Execution error (IllegalArgumentException) at hench.path/remove-point-from-graph (REPL:198).
; Don't know how to create ISeq from: clojure.lang.Var$Unbound
clj꞉hench.path꞉> 
; Evaluating file: path.clj
#'hench.path/strategize
clj꞉hench.path꞉> 
#'hench.path/me
clj꞉hench.path꞉> me
{:shout "why are we shouting??",
 :squad "",
 :name "My Snake",
 :head {:x 2, :y 1},
 :id "snake-508e96ac-94ad-11ea-bb37",
 :latency "111",
 :length 3,
 :health 86,
 :body [{:x 2, :y 1} {:x 3, :y 1} {:x 4, :y 1}]}
clj꞉hench.path꞉> 
start of asp calculation
; Execution error (IllegalArgumentException) at hench.path/remove-point-from-graph (path.clj:198).
; Don't know how to create ISeq from: clojure.lang.Var$Unbound
clj꞉hench.path꞉> (second (:body me))
{:x 3, :y 1}
clj꞉hench.path꞉> 
(remove-point-from-graph {:x 3, :y 1} base-graph)
; Execution error (IllegalArgumentException) at hench.path/remove-point-from-graph (path.clj:198).
; Don't know how to create ISeq from: clojure.lang.Var$Unbound
clj꞉hench.path꞉> base-graph
#object[clojure.lang.Var$Unbound 0x5502ca12 "Unbound: #'hench.path/base-graph"]
clj꞉hench.path꞉> 
#'hench.path/base-graph
clj꞉hench.path꞉> base-graph
[["6 5" "7 5"]
 ["6 5" "6 4"]
 ["6 5" "5 5"]
 ["15 1" "14 1"]
 ["15 1" "16 1"]
 ["3 19" "4 19"]
 ["3 19" "2 19"]
 ["7 5" "6 5"]
 ["7 5" "8 5"]
 ["13 5" "14 5"]
 ["13 5" "12 5"]
 ["14 10" "14 9"]
 ["14 10" "14 11"]
 ["16 3" "15 3"]
 ["16 3" "16 4"]
 ["16 3" "17 3"]
 ["14 5" "13 5"]
 ["14 5" "14 4"]
 ["14 5" "14 6"]
 ["14 8" "14 9"]
 ["14 8" "14 7"]
 ["1 14" "2 14"]
 ["1 14" "1 13"]
 ["1 14" "1 15"]
 ["7 19" "6 19"]
 ["7 19" "8 19"]
 ["6 12" "6 11"]
 ["6 12" "6 13"]
 ["1 17" "1 18"]
 ["1 17" "2 17"]
 ["1 17" "1 16"]
 ["7 9" "8 9"]
 ["7 9" "6 9"]
 ["1 2" "1 3"]
 ["1 2" "1 1"]
 ["16 7" "16 8"]
 ["16 7" "17 7"]
 ["16 7" "15 7"]
 ["8 7" "7 7"]
 ["8 7" "8 6"]
 ["15 11" "16 11"]
 ["15 11" "14 11"]
 ["12 12" "12 11"]
 ["12 12" "12 13"]
 ["10 15" "11 15"]
 ["10 15" "10 14"]
 ["3 1" "4 1"]
 ["3 1" "2 1"]
 ["4 18" "4 19"]
 ["4 18" "4 17"]
 ...]
clj꞉hench.path꞉> 
start of asp calculation
#'hench.path/base-asp
clj꞉hench.path꞉> 
start of asp calculation
#'hench.path/other-asp
clj꞉hench.path꞉> 
start of better-graph calc
@@@ closest:  [{:x 1, :y 1} {:x 2, :y 3} {:x 17, :y 1} {:x 1, :y 19} {:x 4, :y 19} {:x 8, :y 1} {:x 4, :y 5} {:x 1, :y 17}]
[["6 5" "7 5"]
 ["6 5" "6 4"]
 ["6 5" "5 5"]
 ["15 1" "14 1"]
 ["15 1" "16 1"]
 ["3 19" "4 19"]
 ["3 19" "2 19"]
 ["7 5" "6 5"]
 ["7 5" "8 5"]
 ["13 5" "14 5"]
 ["13 5" "12 5"]
 ["14 10" "14 9"]
 ["14 10" "14 11"]
 ["16 3" "15 3"]
 ["16 3" "16 4"]
 ["16 3" "17 3"]
 ["14 5" "13 5"]
 ["14 5" "14 4"]
 ["14 5" "14 6"]
 ["14 8" "14 9"]
 ["14 8" "14 7"]
 ["1 14" "2 14"]
 ["1 14" "1 13"]
 ["1 14" "1 15"]
 ["7 19" "6 19"]
 ["7 19" "8 19"]
 ["6 12" "6 11"]
 ["6 12" "6 13"]
 ["1 17" "1 18"]
 ["1 17" "2 17"]
 ["1 17" "1 16"]
 ["7 9" "8 9"]
 ["7 9" "6 9"]
 ["1 2" "1 3"]
 ["1 2" "1 1"]
 ["16 7" "16 8"]
 ["16 7" "17 7"]
 ["16 7" "15 7"]
 ["8 7" "7 7"]
 ["8 7" "8 6"]
 ["15 11" "16 11"]
 ["15 11" "14 11"]
 ["12 12" "12 11"]
 ["12 12" "12 13"]
 ["10 15" "11 15"]
 ["10 15" "10 14"]
 ["3 1" "4 1"]
 ["3 1" "2 1"]
 ["4 18" "4 19"]
 ["4 18" "4 17"]
 ...]
clj꞉hench.path꞉> 
#'hench.path/better-graph
clj꞉hench.path꞉> 
nil
clj꞉hench.path꞉> (nth nil 3)
nil
clj꞉hench.path꞉> 
start of asp calculation
{:backlinks {}, :depths {}}
clj꞉hench.path꞉> 
start of asp calculation
{:backlinks
 {"1 0" #ubergraph.core.UndirectedEdge{:id #uuid "b7aa1e3e-73d6-41a7-8524-1f051c4e88d1", :src "1 1", :dest "1 0", :mirror? true}, "1 1" #ubergraph.core.UndirectedEdge{:id #uuid "8593fbc2-4edb-486a-af1f-efceba5cc02e", :src "2 1", :dest "1 1", :mirror? false}, "1 2" #ubergraph.core.UndirectedEdge{:id #uuid "79383744-14b9-4c6f-b051-f3ddf97e1b02", :src "1 1", :dest "1 2", :mirror? true}, "1 3" #ubergraph.core.UndirectedEdge{:id #uuid "2619a8fc-191a-48cd-9a6e-5befefa00e17", :src "1 2", :dest "1 3", :mirror? false}, "1 5" #ubergraph.core.UndirectedEdge{:id #uuid "498b9f96-2781-4956-b6e3-fdc1bee99537", :src "2 5", :dest "1 5", :mirror? false}, "0 11" #ubergraph.core.UndirectedEdge{:id #uuid "3637d196-1f2e-4c85-a6a3-76d3358bd3eb", :src "1 11", :dest "0 11", :mirror? true}, "1 6" #ubergraph.core.UndirectedEdge{:id #uuid "d7f8179b-5f23-4b72-9f89-3e2bb35d1786", :src "1 5", :dest "1 6", :mirror? true}, "1 7" #ubergraph.core.UndirectedEdge{:id #uuid "7b8eeda8-7a23-4df2-8735-7368db3206a9", :src "1 6", :dest "1 7", :mirror? true}, "1 8" #ubergraph.core.UndirectedEdge{:id #uuid "4e4e5ba6-c638-46bc-813f-1fc49ad6fe1f", :src "1 7", :dest "1 8", :mirror? false}, "1 9" #ubergraph.core.UndirectedEdge{:id #uuid "00a4db40-2a13-410a-bea2-8aab83340198", :src "1 8", :dest "1 9", :mirror? false}, "9 1" #ubergraph.core.UndirectedEdge{:id #uuid "47de9796-5fbe-45b7-865b-b3b27e45220a", :src "8 1", :dest "9 1", :mirror? true}, "9 5" #ubergraph.core.UndirectedEdge{:id #uuid "f1c91af0-d1b3-43bb-b420-c0cbb907d4a0", :src "8 5", :dest "9 5", :mirror? false}, "9 9" #ubergraph.core.UndirectedEdge{:id #uuid "2ce83dcb-9d72-4c0b-87c6-75a92b0eaaa3", :src "8 9", :dest "9 9", :mirror? false}, "13 11" #ubergraph.core.UndirectedEdge{:id #uuid "c7aaad2a-5484-4149-9f51-07064775700f", :src "12 11", :dest "13 11", :mirror? false}, "11 7" #ubergraph.core.UndirectedEdge{:id #uuid "5c59d9e4-3a7e-499e-aad9-30af1601e6ef", :src "10 7", :dest "11 7", :mirror? true}, "11 5" #ubergraph.core.UndirectedEdge{:id #uuid "67d3b2fc-7942-4269-805f-b67ce6bc7ac8", :src "10 5", :dest "11 5", :mirror? true}, "11 3" #ubergraph.core.UndirectedEdge{:id #uuid "c1411b59-582a-433c-a8d6-6d810bfc91e4", :src "12 3", :dest "11 3", :mirror? true}, "11 1" #ubergraph.core.UndirectedEdge{:id #uuid "cd9d8f8e-6da9-4a90-9d6e-1103c95ab9c7", :src "10 1", :dest "11 1", :mirror? false}, "13 19" #ubergraph.core.UndirectedEdge{:id #uuid "b0aaa586-ff84-4eb4-8f2a-d15ec8b24e8a", :src "12 19", :dest "13 19", :mirror? false}, "13 17" #ubergraph.core.UndirectedEdge{:id #uuid "f6dc9756-5909-465b-928b-75d34d1ffcab", :src "12 17", :dest "13 17", :mirror? true}, "11 9" #ubergraph.core.UndirectedEdge{:id #uuid "fafb3287-71b2-4ef0-a5b0-8752169dc23d", :src "10 9", :dest "11 9", :mirror? false}, "12 13" #ubergraph.core.UndirectedEdge{:id #uuid "59e84019-17ce-4ea1-9f5f-38d5265b7892", :src "11 13", :dest "12 13", :mirror? true}, "6 17" #ubergraph.core.UndirectedEdge{:id #uuid "3fc2f262-0c2d-460b-9f1b-04aaea81d5a0", :src "5 17", :dest "6 17", :mirror? false}, "8 1" #ubergraph.core.UndirectedEdge{:id #uuid "e3aaacad-d32d-4867-9dfb-1fd77f259f8d", :src "8 2", :dest "8 1", :mirror? false}, "12 12" #ubergraph.core.UndirectedEdge{:id #uuid "46e0e040-e1c3-467c-bcb4-a8089b882f32", :src "12 13", :dest "12 12", :mirror? true}, "8 2" #ubergraph.core.UndirectedEdge{:id #uuid "b0b9b4a6-db9b-4457-b618-1810a3a45bb6", :src "8 3", :dest "8 2", :mirror? true}, "12 15" #ubergraph.core.UndirectedEdge{:id #uuid "fb6b7ef8-4088-4917-b909-dcf2cebe820e", :src "12 16", :dest "12 15", :mirror? true}, "6 19" #ubergraph.core.UndirectedEdge{:id #uuid "c6149dbb-55cc-482b-8206-4da02516a248", :src "5 19", :dest "6 19", :mirror? true}, "8 3" #ubergraph.core.UndirectedEdge{:id #uuid "a7e7f82f-050b-49d7-b39f-aa10cd809475", :src "7 3", :dest "8 3", :mirror? true}, "12 17" #ubergraph.core.UndirectedEdge{:id #uuid "eb465101-132f-4693-957b-1641784b79f2", :src "11 17", :dest "12 17", :mirror? false}, "8 5" #ubergraph.core.UndirectedEdge{:id #uuid "bbbc95e1-4c61-4894-a12d-8f3bb52d11e1", :src "7 5", :dest "8 5", :mirror? false}, "12 16" #ubergraph.core.UndirectedEdge{:id #uuid "535f2ccc-6191-4598-8b72-8da2d70663de", :src "12 17", :dest "12 16", :mirror? false}, "8 6" #ubergraph.core.UndirectedEdge{:id #uuid "01a70568-81cc-40ee-bb28-b4dc73a544bd", :src "8 5", :dest "8 6", :mirror? false}, "12 19" #ubergraph.core.UndirectedEdge{:id #uuid "c3ff6995-c1fe-4fdc-83bc-8436a9aeb3fc", :src "11 19", :dest "12 19", :mirror? true}, "8 7" #ubergraph.core.UndirectedEdge{:id #uuid "6ab7d641-ab24-4026-b8be-1037526c1648", :src "8 6", :dest "8 7", :mirror? true}, "6 10" #ubergraph.core.UndirectedEdge{:id #uuid "538e6ccd-d785-470d-8fee-02c9382bdde2", :src "6 9", :dest "6 10", :mirror? false}, "8 9" #ubergraph.core.UndirectedEdge{:id #uuid "e24cddff-7b10-4114-b639-e1aa469536d3", :src "7 9", :dest "8 9", :mirror? false}, "6 12" #ubergraph.core.UndirectedEdge{:id #uuid "48037c9c-281a-4dc7-9555-21eefdf26cd5", :src "6 11", :dest "6 12", :mirror? true}, "6 11" #ubergraph.core.UndirectedEdge{:id #uuid "ff8272e2-fb1d-458c-8251-d83c1edcc016", :src "6 10", :dest "6 11", :mirror? false}, "6 13" #ubergraph.core.UndirectedEdge{:id #uuid "44a7c867-1c7b-4bdb-919d-183ca4a90143", :src "6 12", :dest "6 13", :mirror? false}, "6 16" #ubergraph.core.UndirectedEdge{:id #uuid "624599a5-87a2-49a5-a1c0-6771b35e005a", :src "6 17", :dest "6 16", :mirror? false}, "6 15" #ubergraph.core.UndirectedEdge{:id #uuid "d50dbc44-2774-4616-b5f4-6f4f2f85c0e0", :src "6 16", :dest "6 15", :mirror? false}, "1 18" #ubergraph.core.UndirectedEdge{:id #uuid "aa011bb8-8c8b-4a3f-a421-0ed51b918d05", :src "1 19", :dest "1 18", :mirror? true}, "10 7" #ubergraph.core.UndirectedEdge{:id #uuid "08e500cd-f7d8-4e27-b993-cbd3949d3bb4", :src "10 6", :dest "10 7", :mirror? true}, "1 19" #ubergraph.core.UndirectedEdge{:id #uuid "e5dd21f3-f745-40bb-b144-7fac90a1dcc7", :src "1 20", :dest "1 19", :mirror? true}, "1 16" #ubergraph.core.UndirectedEdge{:id #uuid "9fede55d-9c0a-4491-9569-d2a368402b07", :src "1 17", :dest "1 16", :mirror? false}, "10 5" #ubergraph.core.UndirectedEdge{:id #uuid "91a2782f-e6db-448a-9e9c-bc2b271fc7a2", :src "9 5", :dest "10 5", :mirror? true}, "1 17" #ubergraph.core.UndirectedEdge{:id #uuid "2db79fc0-1b59-4ca4-8949-c60e78b28665", :src "1 18", :dest "1 17", :mirror? true}, "10 6" #ubergraph.core.UndirectedEdge{:id #uuid "757ed443-b671-481f-8fda-6244998f1b80", :src "10 5", :dest "10 6", :mirror? false}, "1 14" #ubergraph.core.UndirectedEdge{:id #uuid "8b23851a-2e27-4e6c-ad84-3a5b9e9919f2", :src "1 15", :dest "1 14", :mirror? true}, ...},
 :depths
 {"1 0" 2, "1 1" 1, "1 2" 2, "1 3" 3, "1 5" 7, "0 11" 18, "1 6" 8, "1 7" 9, "1 8" 10, "1 9" 11, "9 1" 17, "9 5" 13, "9 9" 17, "13 11" 23, "11 7" 17, "11 5" 15, "11 3" 19, "11 1" 19, "13 19" 20, "13 17" 18, "11 9" 19, "12 13" 21, "6 17" 11, "8 1" 16, "12 12" 22, "8 2" 15, "12 15" 19, "6 19" 9, "8 3" 14, "12 17" 17, "8 5" 12, "12 16" 18, "8 6" 13, "12 19" 19, "8 7" 14, "6 10" 15, "8 9" 16, "6 12" 17, "6 11" 16, "6 13" 18, "6 16" 12, "6 15" 13, "1 18" 5, "10 7" 16, "1 19" 4, "1 16" 7, "10 5" 14, "1 17" 6, "10 6" 15, "1 14" 9, ...}}
clj꞉hench.path꞉> 
start of better-graph calc
@@@ closest:  [{:x 1, :y 1} {:x 2, :y 3} {:x 17, :y 1} {:x 1, :y 19} {:x 4, :y 19} {:x 8, :y 1} {:x 4, :y 5} {:x 1, :y 17}]
#########
p:   
path:  (2 1 1 1)
lethal-e  
le-index:  -1
i:  {:x 1, :y 1}
path to i:  (2 1 1 1)
intersection:  {:x 1, :y 1}  is invalid!
start of asp calculation
#########
p:   
path:  (2 1 1 1 1 2 1 3 2 3)
lethal-e  
le-index:  -1
i:  {:x 2, :y 3}
path to i:  (2 1 1 1 1 2 1 3 2 3)
intersection:  {:x 2, :y 3}  is invalid!
start of asp calculation
#########
p:   
path:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5 5 5 6 5 7 5 8 5 9 5 10 5 11 5 12 5 13 5 14 5 14 4 14 3 15 3 16 3 17 3 17 2 17 1)
lethal-e  
le-index:  -1
i:  {:x 17, :y 1}
path to i:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5 5 5 6 5 7 5 8 5 9 5 10 5 11 5 12 5 13 5 14 5 14 4 14 3 15 3 16 3 17 3 17 2 17 1)
intersection:  {:x 17, :y 1}  is invalid!
start of asp calculation
#########
p:   
path:  (2 1 1 1 1 0 1 20 1 19)
lethal-e  
le-index:  -1
i:  {:x 1, :y 19}
path to i:  (2 1 1 1 1 0 1 20 1 19)
intersection:  {:x 1, :y 19}  is invalid!
start of asp calculation
#########
p:   
path:  (2 1 1 1 1 0 1 20 1 19 2 19 3 19 4 19)
lethal-e  
le-index:  -1
i:  {:x 4, :y 19}
path to i:  (2 1 1 1 1 0 1 20 1 19 2 19 3 19 4 19)
intersection:  {:x 4, :y 19}  is invalid!
start of asp calculation
#########
p:  {:x 6, :y 3}
path:  ({:x 1, :y 1} {:x 1, :y 2} {:x 1, :y 3} {:x 2, :y 3} {:x 3, :y 3} {:x 4, :y 3} {:x 4, :y 4} {:x 4, :y 5} {:x 5, :y 5} {:x 6, :y 5} {:x 6, :y 4} {:x 6, :y 3} {:x 7, :y 3} {:x 8, :y 3} {:x 8, :y 2} {:x 8, :y 1})
#########
p:  {:x 6, :y 3}
path:  ({:x 1, :y 1} {:x 1, :y 2} {:x 1, :y 3} {:x 2, :y 3} {:x 3, :y 3} {:x 4, :y 3} {:x 4, :y 4} {:x 4, :y 5} {:x 5, :y 5} {:x 6, :y 5} {:x 6, :y 4} {:x 6, :y 3} {:x 7, :y 3} {:x 8, :y 3} {:x 8, :y 2} {:x 8, :y 1})
#########
p:   
path:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5 5 5 6 5 6 4 6 3 7 3 8 3 8 2 8 1)
lethal-e  
le-index:  -1
i:  {:x 8, :y 1}
path to i:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5 5 5 6 5 6 4 6 3 7 3 8 3 8 2 8 1)
intersection:  {:x 8, :y 1}  is invalid!
start of asp calculation
#########
p:   
path:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5)
lethal-e  
le-index:  -1
i:  {:x 4, :y 5}
path to i:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5)
intersection:  {:x 4, :y 5}  is invalid!
start of asp calculation
#########
p:   
path:  (2 1 1 1 1 0 1 20 1 19 1 18 1 17)
lethal-e  
le-index:  -1
i:  {:x 1, :y 17}
path to i:  (2 1 1 1 1 0 1 20 1 19 1 18 1 17)
intersection:  {:x 1, :y 17}  is invalid!
start of asp calculation
[["6 5" "7 5"]
 ["6 5" "6 4"]
 ["6 5" "5 5"]
 ["15 1" "14 1"]
 ["15 1" "16 1"]
 ["3 19" "2 19"]
 ["7 5" "6 5"]
 ["7 5" "8 5"]
 ["13 5" "14 5"]
 ["13 5" "12 5"]
 ["14 10" "14 9"]
 ["14 10" "14 11"]
 ["16 3" "15 3"]
 ["16 3" "16 4"]
 ["16 3" "17 3"]
 ["14 5" "13 5"]
 ["14 5" "14 4"]
 ["14 5" "14 6"]
 ["14 8" "14 9"]
 ["14 8" "14 7"]
 ["1 14" "2 14"]
 ["1 14" "1 13"]
 ["1 14" "1 15"]
 ["7 19" "6 19"]
 ["7 19" "8 19"]
 ["6 12" "6 11"]
 ["6 12" "6 13"]
 ["1 17" "1 18"]
 ["1 17" "2 17"]
 ["1 17" "1 16"]
 ["7 9" "8 9"]
 ["7 9" "6 9"]
 ["1 2" "1 3"]
 ["1 2" "1 1"]
 ["16 7" "16 8"]
 ["16 7" "17 7"]
 ["16 7" "15 7"]
 ["8 7" "7 7"]
 ["8 7" "8 6"]
 ["15 11" "16 11"]
 ["15 11" "14 11"]
 ["12 12" "12 11"]
 ["12 12" "12 13"]
 ["10 15" "11 15"]
 ["10 15" "10 14"]
 ["3 1" "4 1"]
 ["3 1" "2 1"]
 ["4 18" "4 19"]
 ["4 18" "4 17"]
 ["8 10" "8 9"]
 ...]
clj꞉hench.path꞉> 
#'hench.path/better-graph
clj꞉hench.path꞉> 
start of better-graph calc
@@@ closest:  [{:x 1, :y 1} {:x 2, :y 3} {:x 17, :y 1} {:x 1, :y 19} {:x 4, :y 19} {:x 8, :y 1} {:x 4, :y 5} {:x 1, :y 17}]
#########
p:   
path:  (2 1 1 1)
lethal-e nil
le-index:  -1
i:  {:x 1, :y 1}
path to i:  (2 1 1 1)
intersection:  {:x 1, :y 1}  is invalid!
start of asp calculation
#########
p:   
path:  (2 1 1 1 1 2 1 3 2 3)
lethal-e nil
le-index:  -1
i:  {:x 2, :y 3}
path to i:  (2 1 1 1 1 2 1 3 2 3)
intersection:  {:x 2, :y 3}  is invalid!
start of asp calculation
#########
p:   
path:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5 5 5 6 5 7 5 8 5 9 5 10 5 11 5 12 5 13 5 14 5 14 4 14 3 15 3 16 3 17 3 17 2 17 1)
lethal-e nil
le-index:  -1
i:  {:x 17, :y 1}
path to i:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5 5 5 6 5 7 5 8 5 9 5 10 5 11 5 12 5 13 5 14 5 14 4 14 3 15 3 16 3 17 3 17 2 17 1)
intersection:  {:x 17, :y 1}  is invalid!
start of asp calculation
#########
p:   
path:  (2 1 1 1 1 0 1 20 1 19)
lethal-e nil
le-index:  -1
i:  {:x 1, :y 19}
path to i:  (2 1 1 1 1 0 1 20 1 19)
intersection:  {:x 1, :y 19}  is invalid!
start of asp calculation
#########
p:   
path:  (2 1 1 1 1 0 1 20 1 19 2 19 3 19 4 19)
lethal-e nil
le-index:  -1
i:  {:x 4, :y 19}
path to i:  (2 1 1 1 1 0 1 20 1 19 2 19 3 19 4 19)
intersection:  {:x 4, :y 19}  is invalid!
start of asp calculation
#########
p:  {:x 6, :y 3}
path:  ({:x 1, :y 1} {:x 1, :y 2} {:x 1, :y 3} {:x 2, :y 3} {:x 3, :y 3} {:x 4, :y 3} {:x 4, :y 4} {:x 4, :y 5} {:x 5, :y 5} {:x 6, :y 5} {:x 6, :y 4} {:x 6, :y 3} {:x 7, :y 3} {:x 8, :y 3} {:x 8, :y 2} {:x 8, :y 1})
#########
p:  {:x 6, :y 3}
path:  ({:x 1, :y 1} {:x 1, :y 2} {:x 1, :y 3} {:x 2, :y 3} {:x 3, :y 3} {:x 4, :y 3} {:x 4, :y 4} {:x 4, :y 5} {:x 5, :y 5} {:x 6, :y 5} {:x 6, :y 4} {:x 6, :y 3} {:x 7, :y 3} {:x 8, :y 3} {:x 8, :y 2} {:x 8, :y 1})
#########
p:   
path:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5 5 5 6 5 6 4 6 3 7 3 8 3 8 2 8 1)
lethal-e nil
le-index:  -1
i:  {:x 8, :y 1}
path to i:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5 5 5 6 5 6 4 6 3 7 3 8 3 8 2 8 1)
intersection:  {:x 8, :y 1}  is invalid!
start of asp calculation
#########
p:   
path:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5)
lethal-e nil
le-index:  -1
i:  {:x 4, :y 5}
path to i:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5)
intersection:  {:x 4, :y 5}  is invalid!
start of asp calculation
#########
p:   
path:  (2 1 1 1 1 0 1 20 1 19 1 18 1 17)
lethal-e nil
le-index:  -1
i:  {:x 1, :y 17}
path to i:  (2 1 1 1 1 0 1 20 1 19 1 18 1 17)
intersection:  {:x 1, :y 17}  is invalid!
start of asp calculation
[["6 5" "7 5"]
 ["6 5" "6 4"]
 ["6 5" "5 5"]
 ["15 1" "14 1"]
 ["15 1" "16 1"]
 ["3 19" "2 19"]
 ["7 5" "6 5"]
 ["7 5" "8 5"]
 ["13 5" "14 5"]
 ["13 5" "12 5"]
 ["14 10" "14 9"]
 ["14 10" "14 11"]
 ["16 3" "15 3"]
 ["16 3" "16 4"]
 ["16 3" "17 3"]
 ["14 5" "13 5"]
 ["14 5" "14 4"]
 ["14 5" "14 6"]
 ["14 8" "14 9"]
 ["14 8" "14 7"]
 ["1 14" "2 14"]
 ["1 14" "1 13"]
 ["1 14" "1 15"]
 ["7 19" "6 19"]
 ["7 19" "8 19"]
 ["6 12" "6 11"]
 ["6 12" "6 13"]
 ["1 17" "1 18"]
 ["1 17" "2 17"]
 ["1 17" "1 16"]
 ["7 9" "8 9"]
 ["7 9" "6 9"]
 ["1 2" "1 3"]
 ["1 2" "1 1"]
 ["16 7" "16 8"]
 ["16 7" "17 7"]
 ["16 7" "15 7"]
 ["8 7" "7 7"]
 ["8 7" "8 6"]
 ["15 11" "16 11"]
 ["15 11" "14 11"]
 ["12 12" "12 11"]
 ["12 12" "12 13"]
 ["10 15" "11 15"]
 ["10 15" "10 14"]
 ["3 1" "4 1"]
 ["3 1" "2 1"]
 ["4 18" "4 19"]
 ["4 18" "4 17"]
 ["8 10" "8 9"]
 ...]
clj꞉hench.path꞉> 
; Syntax error compiling at (src/hench/path.clj:629:19).
; Unable to resolve symbol: le-index in this context
clj꞉hench.path꞉> 
#'hench.path/better-graph
clj꞉hench.path꞉> 
start of better-graph calc
@@@ closest:  [{:x 1, :y 1} {:x 2, :y 3} {:x 17, :y 1} {:x 1, :y 19} {:x 4, :y 19} {:x 8, :y 1} {:x 4, :y 5} {:x 1, :y 17}]
lethal-e nil
i:  {:x 1, :y 1}
path to i:  (2 1 1 1)
intersection:  {:x 1, :y 1}  is invalid!
start of asp calculation
lethal-e nil
i:  {:x 2, :y 3}
path to i:  (2 1 1 1 1 2 1 3 2 3)
intersection:  {:x 2, :y 3}  is invalid!
start of asp calculation
lethal-e nil
i:  {:x 17, :y 1}
path to i:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5 5 5 6 5 7 5 8 5 9 5 10 5 11 5 12 5 13 5 14 5 14 4 14 3 15 3 16 3 17 3 17 2 17 1)
intersection:  {:x 17, :y 1}  is invalid!
start of asp calculation
lethal-e nil
i:  {:x 1, :y 19}
path to i:  (2 1 1 1 1 0 1 20 1 19)
intersection:  {:x 1, :y 19}  is invalid!
start of asp calculation
lethal-e nil
i:  {:x 4, :y 19}
path to i:  (2 1 1 1 1 0 1 20 1 19 2 19 3 19 4 19)
intersection:  {:x 4, :y 19}  is invalid!
start of asp calculation
#########
p:  {:x 6, :y 3}
path:  ({:x 1, :y 1} {:x 1, :y 2} {:x 1, :y 3} {:x 2, :y 3} {:x 3, :y 3} {:x 4, :y 3} {:x 4, :y 4} {:x 4, :y 5} {:x 5, :y 5} {:x 6, :y 5} {:x 6, :y 4} {:x 6, :y 3} {:x 7, :y 3} {:x 8, :y 3} {:x 8, :y 2} {:x 8, :y 1})
#########
p:  {:x 6, :y 3}
path:  ({:x 1, :y 1} {:x 1, :y 2} {:x 1, :y 3} {:x 2, :y 3} {:x 3, :y 3} {:x 4, :y 3} {:x 4, :y 4} {:x 4, :y 5} {:x 5, :y 5} {:x 6, :y 5} {:x 6, :y 4} {:x 6, :y 3} {:x 7, :y 3} {:x 8, :y 3} {:x 8, :y 2} {:x 8, :y 1})
lethal-e nil
i:  {:x 8, :y 1}
path to i:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5 5 5 6 5 6 4 6 3 7 3 8 3 8 2 8 1)
intersection:  {:x 8, :y 1}  is invalid!
start of asp calculation
lethal-e nil
i:  {:x 4, :y 5}
path to i:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5)
intersection:  {:x 4, :y 5}  is invalid!
start of asp calculation
lethal-e nil
i:  {:x 1, :y 17}
path to i:  (2 1 1 1 1 0 1 20 1 19 1 18 1 17)
intersection:  {:x 1, :y 17}  is invalid!
start of asp calculation
[["6 5" "7 5"]
 ["6 5" "6 4"]
 ["6 5" "5 5"]
 ["15 1" "14 1"]
 ["15 1" "16 1"]
 ["3 19" "2 19"]
 ["7 5" "6 5"]
 ["7 5" "8 5"]
 ["13 5" "14 5"]
 ["13 5" "12 5"]
 ["14 10" "14 9"]
 ["14 10" "14 11"]
 ["16 3" "15 3"]
 ["16 3" "16 4"]
 ["16 3" "17 3"]
 ["14 5" "13 5"]
 ["14 5" "14 4"]
 ["14 5" "14 6"]
 ["14 8" "14 9"]
 ["14 8" "14 7"]
 ["1 14" "2 14"]
 ["1 14" "1 13"]
 ["1 14" "1 15"]
 ["7 19" "6 19"]
 ["7 19" "8 19"]
 ["6 12" "6 11"]
 ["6 12" "6 13"]
 ["1 17" "1 18"]
 ["1 17" "2 17"]
 ["1 17" "1 16"]
 ["7 9" "8 9"]
 ["7 9" "6 9"]
 ["1 2" "1 3"]
 ["1 2" "1 1"]
 ["16 7" "16 8"]
 ["16 7" "17 7"]
 ["16 7" "15 7"]
 ["8 7" "7 7"]
 ["8 7" "8 6"]
 ["15 11" "16 11"]
 ["15 11" "14 11"]
 ["12 12" "12 11"]
 ["12 12" "12 13"]
 ["10 15" "11 15"]
 ["10 15" "10 14"]
 ["3 1" "4 1"]
 ["3 1" "2 1"]
 ["4 18" "4 19"]
 ["4 18" "4 17"]
 ["8 10" "8 9"]
 ...]
clj꞉hench.path꞉> 
start of better-graph calc
@@@ closest:  [{:x 1, :y 1} {:x 2, :y 3} {:x 17, :y 1} {:x 1, :y 19} {:x 4, :y 19} {:x 8, :y 1} {:x 4, :y 5} {:x 1, :y 17}]
lethal-e nil
i:  {:x 1, :y 1}
path to i:  (2 1 1 1)
intersection:  {:x 1, :y 1}  is invalid!
start of asp calculation
lethal-e nil
i:  {:x 2, :y 3}
path to i:  (2 1 1 1 1 2 1 3 2 3)
intersection:  {:x 2, :y 3}  is invalid!
start of asp calculation
lethal-e nil
i:  {:x 17, :y 1}
path to i:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5 5 5 6 5 7 5 8 5 9 5 10 5 11 5 12 5 13 5 14 5 14 4 14 3 15 3 16 3 17 3 17 2 17 1)
intersection:  {:x 17, :y 1}  is invalid!
start of asp calculation
lethal-e nil
i:  {:x 1, :y 19}
path to i:  (2 1 1 1 1 0 1 20 1 19)
intersection:  {:x 1, :y 19}  is invalid!
start of asp calculation
lethal-e nil
i:  {:x 4, :y 19}
path to i:  (2 1 1 1 1 0 1 20 1 19 2 19 3 19 4 19)
intersection:  {:x 4, :y 19}  is invalid!
start of asp calculation
#########
p:  {:x 6, :y 3}
path:  ({:x 1, :y 1} {:x 1, :y 2} {:x 1, :y 3} {:x 2, :y 3} {:x 3, :y 3} {:x 4, :y 3} {:x 4, :y 4} {:x 4, :y 5} {:x 5, :y 5} {:x 6, :y 5} {:x 6, :y 4} {:x 6, :y 3} {:x 7, :y 3} {:x 8, :y 3} {:x 8, :y 2} {:x 8, :y 1})
#########
p:  {:x 6, :y 3}
path:  ({:x 1, :y 1} {:x 1, :y 2} {:x 1, :y 3} {:x 2, :y 3} {:x 3, :y 3} {:x 4, :y 3} {:x 4, :y 4} {:x 4, :y 5} {:x 5, :y 5} {:x 6, :y 5} {:x 6, :y 4} {:x 6, :y 3} {:x 7, :y 3} {:x 8, :y 3} {:x 8, :y 2} {:x 8, :y 1})
lethal-e nil
i:  {:x 8, :y 1}
path to i:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5 5 5 6 5 6 4 6 3 7 3 8 3 8 2 8 1)
intersection:  {:x 8, :y 1}  is invalid!
start of asp calculation
lethal-e nil
i:  {:x 4, :y 5}
path to i:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5)
intersection:  {:x 4, :y 5}  is invalid!
start of asp calculation
lethal-e nil
i:  {:x 1, :y 17}
path to i:  (2 1 1 1 1 0 1 20 1 19 1 18 1 17)
intersection:  {:x 1, :y 17}  is invalid!
start of asp calculation
[["6 5" "7 5"]
 ["6 5" "6 4"]
 ["6 5" "5 5"]
 ["15 1" "14 1"]
 ["15 1" "16 1"]
 ["3 19" "2 19"]
 ["7 5" "6 5"]
 ["7 5" "8 5"]
 ["13 5" "14 5"]
 ["13 5" "12 5"]
 ["14 10" "14 9"]
 ["14 10" "14 11"]
 ["16 3" "15 3"]
 ["16 3" "16 4"]
 ["16 3" "17 3"]
 ["14 5" "13 5"]
 ["14 5" "14 4"]
 ["14 5" "14 6"]
 ["14 8" "14 9"]
 ["14 8" "14 7"]
 ["1 14" "2 14"]
 ["1 14" "1 13"]
 ["1 14" "1 15"]
 ["7 19" "6 19"]
 ["7 19" "8 19"]
 ["6 12" "6 11"]
 ["6 12" "6 13"]
 ["1 17" "1 18"]
 ["1 17" "2 17"]
 ["1 17" "1 16"]
 ["7 9" "8 9"]
 ["7 9" "6 9"]
 ["1 2" "1 3"]
 ["1 2" "1 1"]
 ["16 7" "16 8"]
 ["16 7" "17 7"]
 ["16 7" "15 7"]
 ["8 7" "7 7"]
 ["8 7" "8 6"]
 ["15 11" "16 11"]
 ["15 11" "14 11"]
 ["12 12" "12 11"]
 ["12 12" "12 13"]
 ["10 15" "11 15"]
 ["10 15" "10 14"]
 ["3 1" "4 1"]
 ["3 1" "2 1"]
 ["4 18" "4 19"]
 ["4 18" "4 17"]
 ["8 10" "8 9"]
 ...]
clj꞉hench.path꞉> 
start of better-graph calc
@@@ closest:  [{:x 1, :y 1} {:x 2, :y 3} {:x 17, :y 1} {:x 1, :y 19} {:x 4, :y 19} {:x 8, :y 1} {:x 4, :y 5} {:x 1, :y 17}]
lethal-e nil
i:  {:x 1, :y 1}
path to i:  (2 1 1 1)
intersection:  {:x 1, :y 1}  is invalid!
start of asp calculation
lethal-e nil
i:  {:x 2, :y 3}
path to i:  (2 1 1 1 1 2 1 3 2 3)
intersection:  {:x 2, :y 3}  is invalid!
start of asp calculation
lethal-e nil
i:  {:x 17, :y 1}
path to i:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5 5 5 6 5 7 5 8 5 9 5 10 5 11 5 12 5 13 5 14 5 14 4 14 3 15 3 16 3 17 3 17 2 17 1)
intersection:  {:x 17, :y 1}  is invalid!
start of asp calculation
lethal-e nil
i:  {:x 1, :y 19}
path to i:  (2 1 1 1 1 0 1 20 1 19)
intersection:  {:x 1, :y 19}  is invalid!
start of asp calculation
lethal-e nil
i:  {:x 4, :y 19}
path to i:  (2 1 1 1 1 0 1 20 1 19 2 19 3 19 4 19)
intersection:  {:x 4, :y 19}  is invalid!
start of asp calculation
#########
p:  {:x 6, :y 3}
path:  ({:x 1, :y 1} {:x 1, :y 2} {:x 1, :y 3} {:x 2, :y 3} {:x 3, :y 3} {:x 4, :y 3} {:x 4, :y 4} {:x 4, :y 5} {:x 5, :y 5} {:x 6, :y 5} {:x 6, :y 4} {:x 6, :y 3} {:x 7, :y 3} {:x 8, :y 3} {:x 8, :y 2} {:x 8, :y 1})
#########
p:  {:x 6, :y 3}
path:  ({:x 1, :y 1} {:x 1, :y 2} {:x 1, :y 3} {:x 2, :y 3} {:x 3, :y 3} {:x 4, :y 3} {:x 4, :y 4} {:x 4, :y 5} {:x 5, :y 5} {:x 6, :y 5} {:x 6, :y 4} {:x 6, :y 3} {:x 7, :y 3} {:x 8, :y 3} {:x 8, :y 2} {:x 8, :y 1})
lethal-e nil
i:  {:x 8, :y 1}
path to i:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5 5 5 6 5 6 4 6 3 7 3 8 3 8 2 8 1)
intersection:  {:x 8, :y 1}  is invalid!
start of asp calculation
lethal-e nil
i:  {:x 4, :y 5}
path to i:  (2 1 1 1 1 2 1 3 2 3 3 3 4 3 4 4 4 5)
intersection:  {:x 4, :y 5}  is invalid!
start of asp calculation
lethal-e nil
i:  {:x 1, :y 17}
path to i:  (2 1 1 1 1 0 1 20 1 19 1 18 1 17)
intersection:  {:x 1, :y 17}  is invalid!
start of asp calculation
#'hench.path/bg
clj꞉hench.path꞉> (in? ["14 10" "14 11"] bg)
true
clj꞉hench.path꞉> 
(in? ["14 10" "14 10"] bg)
nil
clj꞉hench.path꞉> 
(in? {:x 16 :y 3} am-intersections)
true
clj꞉hench.path꞉> 
#'hench.path/b-graph
clj꞉hench.path꞉> (uber/pprint b-graph)
Digraph
; Execution error (IllegalArgumentException) at loom.graph/eval12225$fn$G (graph.cljc:15).
; No implementation of method: :nodes of protocol: #'loom.graph/Graph found for class: clojure.lang.PersistentVector
clj꞉hench.path꞉> 
